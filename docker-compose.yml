version: '3.8'

services:
  # Frontend Service (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: school-website-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/public:/app/frontend/public
      - ./frontend/src:/app/frontend/src
      - ./frontend/tailwind.config.mjs:/app/frontend/tailwind.config.mjs
      - ./frontend/postcss.config.mjs:/app/frontend/postcss.config.mjs
      - ./frontend/next.config.mjs:/app/frontend/next.config.mjs
      - ./frontend/tsconfig.json:/app/frontend/tsconfig.json
    environment:
      - NODE_ENV=development
    networks:
      - app-network

  # Backend Service (Node.js/Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: school-website-backend
    ports:
      - "5001:5000"
    volumes:
      - ./backend:/app/backend
      - /app/backend/node_modules
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=5432
    env_file:
      - .env
    networks:
      - app-network
  
  # Database Service (PostgreSQL)
  db:
    image: postgres:latest
    container_name: school-website-db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Add volume for initial schema
      - ./backend/models/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local 